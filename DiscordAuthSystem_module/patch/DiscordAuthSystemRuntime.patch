From 14be66edc2e037b803c4688100021e28212c88c6 Mon Sep 17 00:00:00 2001
From: Meido <popenkodaniil@mail.ru>
Date: Sun, 26 Jun 2022 03:03:55 +0700
Subject: [PATCH] feat: DiscordAuthSystem_module

---
 .../client/gui/impl/GuiEventHandler.java      | 17 ++++++++++
 .../client/gui/scenes/login/LoginScene.java   |  4 +++
 .../scenes/login/methods/WebAuthMethod.java   | 31 ++++++++++++++-----
 3 files changed, 44 insertions(+), 8 deletions(-)

diff --git a/src/main/java/pro/gravit/launcher/client/gui/impl/GuiEventHandler.java b/src/main/java/pro/gravit/launcher/client/gui/impl/GuiEventHandler.java
index c817abe..5dd3e8c 100644
--- a/src/main/java/pro/gravit/launcher/client/gui/impl/GuiEventHandler.java
+++ b/src/main/java/pro/gravit/launcher/client/gui/impl/GuiEventHandler.java
@@ -3,12 +3,15 @@ package pro.gravit.launcher.client.gui.impl;
 import pro.gravit.launcher.client.gui.JavaFXApplication;
 import pro.gravit.launcher.client.gui.scenes.login.LoginScene;
 import pro.gravit.launcher.events.RequestEvent;
+import pro.gravit.launcher.events.request.AdditionalDataRequestEvent;
 import pro.gravit.launcher.events.request.AuthRequestEvent;
 import pro.gravit.launcher.request.RequestService;
 import pro.gravit.launcher.request.WebSocketEvent;
 import pro.gravit.launcher.request.websockets.ClientWebSocketService;
 import pro.gravit.utils.helper.LogHelper;
 
+import java.util.Map;
+
 public class GuiEventHandler implements RequestService.EventHandler {
     private final JavaFXApplication application;
 
@@ -32,6 +35,20 @@ public class GuiEventHandler implements RequestService.EventHandler {
                 if (isNextScene && ((LoginScene) application.getCurrentScene()).isLoginStarted)
                     ((LoginScene) application.getCurrentScene()).onGetProfiles();
             }
+            if (event instanceof AdditionalDataRequestEvent) {
+                AdditionalDataRequestEvent dataRequest = (AdditionalDataRequestEvent) event;
+                Map<String, String> data = dataRequest.data;
+
+                String type = data.get("type");
+
+                if (type != null && type.equals("ChangeRuntimeSettings")) {
+                    application.runtimeSettings.login = data.get("login");
+                    application.runtimeSettings.oauthAccessToken = data.get("oauthAccessToken");
+                    application.runtimeSettings.oauthRefreshToken = data.get("oauthRefreshToken");
+                    application.runtimeSettings.oauthExpire = System.currentTimeMillis() + Integer.parseInt(data.get("oauthExpire"));
+                    application.runtimeSettings.lastAuth = ((LoginScene) application.getCurrentScene()).getAuthAvailability();
+                }
+            }
         } catch (Throwable e) {
             LogHelper.error(e);
         }
diff --git a/src/main/java/pro/gravit/launcher/client/gui/scenes/login/LoginScene.java b/src/main/java/pro/gravit/launcher/client/gui/scenes/login/LoginScene.java
index 80cf2ed..0b9aa9d 100644
--- a/src/main/java/pro/gravit/launcher/client/gui/scenes/login/LoginScene.java
+++ b/src/main/java/pro/gravit/launcher/client/gui/scenes/login/LoginScene.java
@@ -146,6 +146,10 @@ public class LoginScene extends AbstractScene {
         LogHelper.info("Selected auth: %s", authAvailability.name);
     }
 
+    public GetAvailabilityAuthRequestEvent.AuthAvailability getAuthAvailability() {
+        return this.authAvailability;
+    }
+
     public void addAuthAvailability(GetAvailabilityAuthRequestEvent.AuthAvailability authAvailability) {
         RadioButton radio = new RadioButton();
         radio.setToggleGroup(authToggleGroup);
diff --git a/src/main/java/pro/gravit/launcher/client/gui/scenes/login/methods/WebAuthMethod.java b/src/main/java/pro/gravit/launcher/client/gui/scenes/login/methods/WebAuthMethod.java
index cf888f1..d6cb6f9 100644
--- a/src/main/java/pro/gravit/launcher/client/gui/scenes/login/methods/WebAuthMethod.java
+++ b/src/main/java/pro/gravit/launcher/client/gui/scenes/login/methods/WebAuthMethod.java
@@ -13,6 +13,10 @@ import pro.gravit.launcher.request.auth.details.AuthWebViewDetails;
 import pro.gravit.launcher.request.auth.password.AuthCodePassword;
 import pro.gravit.utils.helper.LogHelper;
 
+import java.awt.Desktop;
+import java.io.IOException;
+import java.net.URI;
+import java.net.URISyntaxException;
 import java.util.concurrent.CompletableFuture;
 import java.util.function.Consumer;
 
@@ -52,15 +56,26 @@ public class WebAuthMethod extends AbstractAuthMethod<AuthWebViewDetails> {
     @Override
     public CompletableFuture<LoginScene.LoginAndPasswordResult> auth(AuthWebViewDetails details) {
         overlay.future = new CompletableFuture<>();
-        overlay.follow(details.url, details.redirectUrl, (r) -> {
-            String code = r;
-            LogHelper.debug("Code: %s", code);
-            if(code.startsWith("?code=")) {
-                code = r.substring("?code=".length(), r.indexOf("&"));
+        if (details.onlyBrowser) {
+            if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
+                try {
+                    Desktop.getDesktop().browse(new URI(details.url));
+                } catch (IOException | URISyntaxException e) {
+                    e.printStackTrace();
+                }
             }
-            LogHelper.debug("Code: %s", code);
-            overlay.future.complete(new LoginScene.LoginAndPasswordResult(null, new AuthCodePassword(code)));
-        });
+            overlay.disable();
+        } else {
+            overlay.follow(details.url, details.redirectUrl, (r) -> {
+                String code = r;
+                LogHelper.debug("Code: %s", code);
+                if(code.startsWith("?code=")) {
+                    code = r.substring("?code=".length(), r.indexOf("&"));
+                }
+                LogHelper.debug("Code: %s", code);
+                overlay.future.complete(new LoginScene.LoginAndPasswordResult(null, new AuthCodePassword(code)));
+            });
+        }
         return overlay.future;
     }
 
-- 
2.29.2.windows.2

